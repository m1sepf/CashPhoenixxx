import telebot
from telebot import types
import sqlite3
import os
import random
import time
import urllib3
from datetime import datetime
from telebot.handler_backends import State, StatesGroup
from telebot.apihelper import ApiException
from flask import Flask
from threading import Thread
import requests

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ –∑ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∞–º–∏
urllib3.disable_warnings()
telebot.apihelper.RETRY_ON_ERROR = True

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω—ñ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏
bot = telebot.TeleBot('7577998733:AAErlaTvwg7gnBeNSN2w4oJkFpSHWL6_OuA',
    parse_mode='HTML',
    threaded=True
)
ADMIN_ID = 1270564746
CHANNEL_ID = '@CryptoWaveee'
REFERRAL_REWARD = 0.5
MIN_WITHDRAWAL = 10.0


app = Flask(__name__)

@app.route('/')
def home():
    """–ü—Ä–æ—Å—Ç–∏–π endpoint –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —â–æ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î"""
    return "I'm alive"

def run():
    app.run(host='0.0.0.0', port=3457)

def keep_alive():
    """–°—Ç–≤–æ—Ä—é—î —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î —Å–µ—Ä–≤–µ—Ä —É –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
    t = Thread(target=run)
    t.start()

def ping_bot():
    while True:
        try:
            response = requests.get('https://M1sepf.pythonanywhere.com/', timeout=30)
            print(f"üîî Ping status: {response.status_code}")
        except requests.RequestException as e:
            print(f"‚ö†Ô∏è Ping failed: {e}")
        except Exception as e:
            print(f"‚ö†Ô∏è Unexpected error: {e}")
        time.sleep(300)


def ensure_database_exists():
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π —Ç–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    try:
        if os.path.isfile('bot_database.db'):
            print('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ—Å–Ω—É—î')
        # –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î
        else:
            # If db not exist init database
            init_db()
        return True
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {str(e)}")
        return False

# –ö–ª–∞—Å –¥–ª—è —Å—Ç–∞–Ω—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
class UserState:
    none = 'NONE'
    waiting_for_withdrawal = 'WAITING_FOR_WITHDRAWAL'
    waiting_for_broadcast = 'WAITING_FOR_BROADCAST'
    waiting_for_channel_add = 'WAITING_FOR_CHANNEL_ADD'
    waiting_for_balance_change = 'WAITING_FOR_BALANCE_CHANGE'
    waiting_promo = 'waiting_promo'
    waiting_admin_promo = 'waiting_admin_promo'
    waiting_admin_reward = 'waiting_admin_reward'
    waiting_admin_activations = 'waiting_admin_activations'


def safe_db_connect():
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    try:
        # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ—Å–Ω—É—î
        if not ensure_database_exists():
            raise Exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–±–µ–∑–ø–µ—á–∏—Ç–∏ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")

        conn = sqlite3.connect('bot_database.db', check_same_thread=False)
        return conn
    except sqlite3.Error as e:
        error_message = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î: {str(e)}"
        print(error_message)
        bot.send_message(ADMIN_ID, error_message)
        return None

def safe_execute_sql(query, params=None, fetch_one=False):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è SQL-–∑–∞–ø–∏—Ç—ñ–≤"""
    try:

        conn = sqlite3.connect('bot_database.db')
        cursor = conn.cursor()

        print(f"Executing query: {query}")
        print(f"Parameters: {params}")

        if params is not None:
            cursor.execute(query, params)
        else:
            cursor.execute(query)

        if fetch_one:
            result = cursor.fetchone()
        else:
            result = cursor.fetchall()

        print(f"Query result: {result}")

        conn.commit()
        conn.close()
        return result
    except Exception as e:
        error_message = f"Database error: {str(e)}"
        print(error_message)
        return None

def init_db():
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    if os.path.isfile('bot_database.db'):
        print("Database already exists from init function")
    else:
        print('‚ùå–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ —ñ—Å–Ω—É—î. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è...')
        conn = sqlite3.connect('bot_database.db')
        try:
            c = conn.cursor()

            # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
            c.execute('''CREATE TABLE users
                (user_id INTEGER PRIMARY KEY,
                username TEXT,
                balance REAL DEFAULT 0,
                total_earnings REAL DEFAULT 0,
                referrer_id INTEGER,
                join_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                state TEXT DEFAULT 'none',
                temp_data TEXT)''')

            c.execute('''CREATE TABLE channels
                (channel_id TEXT PRIMARY KEY,
                channel_name TEXT,
                channel_link TEXT,
                added_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                is_required INTEGER DEFAULT 1)''')

            c.execute('''CREATE TABLE transactions
                (id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                amount REAL,
                type TEXT,
                status TEXT,
                ton_wallet TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(user_id))''')

            c.execute('''CREATE TABLE promo_codes
                (code TEXT PRIMARY KEY,
                reward REAL,
                max_activations INTEGER,
                current_activations INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')

            c.execute('''CREATE TABLE used_promo_codes
                (user_id INTEGER,
                promo_code TEXT,
                activated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                PRIMARY KEY (user_id, promo_code),
                FOREIGN KEY (user_id) REFERENCES users(user_id),
                FOREIGN KEY (promo_code) REFERENCES promo_codes(code))''')

            c.execute('''CREATE TABLE temp_referrals
                (user_id INTEGER PRIMARY KEY,
                referral_code TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(user_id))''')

            c.execute('''CREATE TABLE referral_history
                (id INTEGER PRIMARY KEY AUTOINCREMENT,
                referrer_id INTEGER NOT NULL,
                referral_user_id INTEGER NOT NULL,
                reward_amount REAL NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (referrer_id) REFERENCES users(user_id),
                FOREIGN KEY (referral_user_id) REFERENCES users(user_id))''')

            conn.commit()
            print("‚úÖ –í—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω—ñ")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç–∞–±–ª–∏—Ü—å: {str(e)}")
            bot.send_message(ADMIN_ID, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç–∞–±–ª–∏—Ü—å: {str(e)}")
        finally:
            conn.close()


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤
def create_promo_codes_table():
    safe_execute_sql('''
        CREATE TABLE IF NOT EXISTS promo_codes (
            code TEXT PRIMARY KEY,
            reward REAL,
            max_activations INTEGER,
            current_activations INTEGER,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

def add_required_channel(channel_id, channel_name, channel_link):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±–æ–≤'—è–∑–∫–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É"""
    try:
        # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —Ç–∞–±–ª–∏—Ü—è channels
        ensure_database_exists()

        conn = sqlite3.connect('bot_database.db')
        c = conn.cursor()

        # –î–æ–¥–∞—î–º–æ –∫–∞–Ω–∞–ª
        c.execute('''
            INSERT INTO channels (channel_id, channel_name, channel_link, is_required)
            VALUES (?, ?, ?, 1)
        ''', (channel_id, channel_name, channel_link))

        conn.commit()
        print(f"‚úÖ –ö–∞–Ω–∞–ª {channel_name} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ")
        return True
    except sqlite3.IntegrityError:
        print(f"‚ùå –ö–∞–Ω–∞–ª {channel_id} –≤–∂–µ —ñ—Å–Ω—É—î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö")
        return False
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–∞–Ω–∞–ª—É: {str(e)}")
        return False
    finally:
        conn.close()


def check_subscription(user_id):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –∫–∞–Ω–∞–ª–∏"""
    try:
        conn = sqlite3.connect('bot_database.db')
        c = conn.cursor()

        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤
        c.execute('SELECT channel_id FROM channels WHERE is_required = 1')
        channels = c.fetchall()

        if not channels:
            print("–ù–µ–º–∞—î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏")
            return True

        for channel in channels:
            try:
                member = bot.get_chat_member(channel[0], user_id)
                if member.status not in ['member', 'administrator', 'creator']:
                    return False
            except ApiException as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–∞–Ω–∞–ª—É {channel[0]}: {str(e)}")
                continue
        return True
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏: {str(e)}")
        return False
    finally:
        conn.close()

def check_users_table(user_id):  # –î–æ–¥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä user_id
    try:
        conn = sqlite3.connect('bot_database.db')
        cursor = conn.cursor()
        cursor.execute("PRAGMA table_info(users)")
        columns = cursor.fetchall()
        print(f"Users table structure:", columns)
        conn.close()
    except Exception as e:
        print(f"Error checking users table: {str(e)}")

    # –î–æ–±–∞–≤—Ç–µ —Ü–µ–π –∑–∞–ø–∏—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    user_exists = safe_execute_sql(
        'SELECT 1 FROM users WHERE user_id = ?',
        (user_id,),
        fetch_one=True
    )

    if not user_exists:
        print(f"User {user_id} not found in database")


def create_main_keyboard(user_id):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å'),
        types.KeyboardButton('üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞'),
        types.KeyboardButton('üí≥ –í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏'),
        types.KeyboardButton('üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'),
        types.KeyboardButton('üéÆ –ú–∏–Ω–∏ –∏–≥—Ä—ã'),
        types.KeyboardButton('üçÄ –ü—Ä–æ–º–æ–∫–æ–¥'),
        types.KeyboardButton('üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤'),
        types.KeyboardButton('üõ†Ô∏è–¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞')
    ]
    keyboard.add(*buttons)
    if user_id == ADMIN_ID:
        keyboard.add(types.KeyboardButton('üîë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å'))
    return keyboard


#–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def start(message):
    if message.from_user.is_bot:
        return

    user_id = message.from_user.id
    username = message.from_user.username or "Anonymous"

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∫–æ–¥
    if len(message.text.split()) > 1:
        referral_code = message.text.split()[1]
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –±—É–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º
        existing_referral = safe_execute_sql(
            "SELECT id FROM referral_history WHERE referral_user_id = ?",
            (user_id,),
            fetch_one=True
        )

        if not existing_referral and referral_code != str(user_id):
            safe_execute_sql(
                "INSERT OR REPLACE INTO temp_referrals (user_id, referral_code) VALUES (?, ?)",
                (user_id, referral_code)
            )

    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏
        if not check_subscription(user_id):
            keyboard = types.InlineKeyboardMarkup()
            channels = safe_execute_sql(
                'SELECT channel_id, channel_name, channel_link FROM channels WHERE is_required = 1')

            if channels:
                for channel in channels:
                    keyboard.add(types.InlineKeyboardButton(
                        text=f"üì¢ {channel[1]}",
                        url=channel[2]
                    ))

                keyboard.add(types.InlineKeyboardButton(
                    text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                    callback_data="check_subscription"
                ))

                bot.send_message(user_id, "üîî –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:",
                               reply_markup=keyboard)
                return

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î
        existing_user = safe_execute_sql(
            "SELECT user_id, referrer_id FROM users WHERE user_id = ?",
            (user_id,),
            fetch_one=True
        )

        # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∫–æ–¥
        referral_code = message.text.split()[1] if len(message.text.split()) > 1 else None

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –±—É–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º
        existing_referral = safe_execute_sql(
            "SELECT id FROM referral_history WHERE referral_user_id = ?",
            (user_id,),
            fetch_one=True
        )

        if not existing_user and not existing_referral:
            if referral_code and referral_code != str(user_id):
                referrer_id = int(referral_code)

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ä–µ—Ñ–µ—Ä–µ—Ä
                referrer = safe_execute_sql(
                    "SELECT user_id, balance FROM users WHERE user_id = ?",
                    (referrer_id,),
                    fetch_one=True
                )

                if referrer:
                    # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–º
                    safe_execute_sql(
                        """INSERT INTO users (user_id, username, referrer_id)
                           VALUES (?, ?, ?)""",
                        (user_id, username, referrer_id)
                    )

                    # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä—É
                    new_balance = referrer[1] + REFERRAL_REWARD
                    safe_execute_sql(
                        "UPDATE users SET balance = ?, total_earnings = total_earnings + ? WHERE user_id = ?",
                        (new_balance, REFERRAL_REWARD, referrer_id)
                    )

                    # –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Å –ø—Ä–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
                    safe_execute_sql(
                        """INSERT INTO transactions (user_id, amount, type, status)
                           VALUES (?, ?, 'referral_reward', 'completed')""",
                        (referrer_id, REFERRAL_REWARD)
                    )

                    # –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Å –≤ —ñ—Å—Ç–æ—Ä—ñ—é —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
                    safe_execute_sql(
                        """INSERT INTO referral_history (referrer_id, referral_user_id, reward_amount)
                           VALUES (?, ?, ?)""",
                        (referrer_id, user_id, REFERRAL_REWARD)
                    )

                    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ä–µ—Ñ–µ—Ä—É
                    bot.send_message(
                        referrer_id,
                        f"üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! (@{username})\n"
                        f"üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ: {REFERRAL_REWARD}$\n"
                        f"üí≥ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}$"
                    )
                else:
                    # –Ø–∫—â–æ —Ä–µ—Ñ–µ—Ä–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π, –¥–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –±–µ–∑ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                    safe_execute_sql(
                        "INSERT INTO users (user_id, username) VALUES (?, ?)",
                        (user_id, username)
                    )
            else:
                # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –±–µ–∑ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                safe_execute_sql(
                    "INSERT INTO users (user_id, username) VALUES (?, ?)",
                    (user_id, username)
                )

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        ref_link = f"https://t.me/{bot.get_me().username}?start={user_id}"

        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
        referrals_count = safe_execute_sql(
            "SELECT COUNT(*) FROM users WHERE referrer_id = ?",
            (user_id,),
            fetch_one=True
        )[0]

        # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫ –∑ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
        total_ref_earnings = safe_execute_sql(
            """SELECT COALESCE(SUM(amount), 0) FROM transactions
               WHERE user_id = ? AND type = 'referral_reward'""",
            (user_id,),
            fetch_one=True
        )[0]

        welcome_message = (
            f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç—É–≤—É–µ–º –≤ –±–æ—Ç–µ!\n\n"
            f"üíé –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ {REFERRAL_REWARD}$!\n\n"
            f"üî• –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            f"üí∞ –ó–∞—Ä–æ–±–æ—Ç–æ–∫ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö\n"
            f"üí≥ –í—ã–≤–æ–¥ –¥–µ–Ω–µ–≥\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        )

        bot.send_message(user_id, welcome_message, reply_markup=create_main_keyboard(user_id))

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ start: {str(e)}"
        print(error_msg)
        bot.send_message(ADMIN_ID, f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")


@bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
def check_subscription_callback(call):
    user_id = call.from_user.id

    if check_subscription(user_id):
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∫–æ–¥ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∞–±–æ —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è
            referral_data = safe_execute_sql(
                "SELECT referral_code FROM temp_referrals WHERE user_id = ?",
                (user_id,),
                fetch_one=True
            )

            if referral_data and referral_data[0]:
                referrer_id = int(referral_data[0])

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ä–µ—Ñ–µ—Ä–µ—Ä
                referrer = safe_execute_sql(
                    "SELECT user_id, balance FROM users WHERE user_id = ?",
                    (referrer_id,),
                    fetch_one=True
                )

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –±—É–≤ —Ü–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º
                existing_referral = safe_execute_sql(
                    "SELECT id FROM referral_history WHERE referral_user_id = ?",
                    (user_id,),
                    fetch_one=True
                )

                if referrer and not existing_referral:
                    # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä—É
                    new_balance = referrer[1] + REFERRAL_REWARD
                    safe_execute_sql(
                        "UPDATE users SET balance = ?, total_earnings = total_earnings + ? WHERE user_id = ?",
                        (new_balance, REFERRAL_REWARD, referrer_id)
                    )

                    # –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Å –ø—Ä–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
                    safe_execute_sql(
                        """INSERT INTO transactions (user_id, amount, type, status)
                           VALUES (?, ?, 'referral_reward', 'completed')""",
                        (referrer_id, REFERRAL_REWARD)
                    )

                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤ —ñ—Å—Ç–æ—Ä—ñ—ó
                    safe_execute_sql(
                        """INSERT INTO referral_history (referrer_id, referral_user_id, reward_amount)
                           VALUES (?, ?, ?)""",
                        (referrer_id, user_id, REFERRAL_REWARD)
                    )

                    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ä–µ—Ñ–µ—Ä—É
                    username = call.from_user.username or f"User{user_id}"
                    bot.send_message(
                        referrer_id,
                        f"üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! (@{username})\n"
                        f"üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ: {REFERRAL_REWARD}$\n"
                        f"üí≥ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}$"
                    )

            # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ
            safe_execute_sql(
                "DELETE FROM temp_referrals WHERE user_id = ?",
                (user_id,)
            )

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            bot.edit_message_text(
                "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç!",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id
            )

            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∑–≤–∏—á–∞–π–Ω–∏–π –ø—Ä–æ—Ü–µ—Å —Å—Ç–∞—Ä—Ç—É
            start(call.message)

        except Exception as e:
            print(f"Error in check_subscription_callback: {str(e)}")
            bot.send_message(ADMIN_ID, f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}")

    else:
        bot.answer_callback_query(
            call.id,
            "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!"
        )


def debug_referral_system(referrer_id, new_user_id):
    """
    –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
    """
    try:
        print(f"Starting referral debug for referrer {referrer_id} and new user {new_user_id}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É —Ä–µ—Ñ–µ—Ä–∞ –¥–æ
        balance_before = safe_execute_sql(
            'SELECT balance FROM users WHERE user_id = ?',
            (referrer_id,),
            fetch_one=True
        )
        print(f"Referrer balance before: {balance_before}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
        transactions = safe_execute_sql(
            'SELECT * FROM transactions WHERE user_id = ? AND type = ? ORDER BY created_at DESC LIMIT 5',
            (referrer_id, 'referral'),
            fetch_one=False
        )
        print(f"Recent referral transactions: {transactions}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–≤'—è–∑–∫—É –º—ñ–∂ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
        referral_link = safe_execute_sql(
            'SELECT referrer_id FROM users WHERE user_id = ?',
            (new_user_id,),
            fetch_one=True
        )
        print(f"Referral link in database: {referral_link}")

        return {
            'balance_before': balance_before,
            'transactions': transactions,
            'referral_link': referral_link
        }
    except Exception as e:
        print(f"Error in referral debug: {str(e)}")
        return None

# –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@bot.message_handler(content_types=['text'])
def handle_text(message):
    user_id = message.from_user.id
    text = message.text.strip()

    # –ë–∞–∑–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    if message.from_user.is_bot:
        return

    if not check_subscription(user_id):
        start(message)
        return

    # –°–ø—Ä–æ—â–µ–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
    if text == 'üîë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å' or text == '–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å':
        if user_id == ADMIN_ID:
            show_admin_panel(message)
        return

    # –°–ø—Ä–æ—â–µ–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    if text == '‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞' and user_id == ADMIN_ID:
        start_user_deletion(message)
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è ID –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    try:
        state = safe_execute_sql(
            'SELECT state FROM users WHERE user_id = ?',
            (user_id,),
            fetch_one=True
        )

        if state and state[0] == 'waiting_for_user_deletion' and user_id == ADMIN_ID:
            try:
                user_to_delete = int(text)
                handle_user_deletion(message)
                return
            except ValueError:
                bot.send_message(ADMIN_ID, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                return
    except Exception as e:
        print(f"Error checking state: {str(e)}")

    # –û–±—Ä–æ–±–∫–∞ —ñ–Ω—à–∏—Ö –∫–æ–º–∞–Ω–¥
    if user_id == ADMIN_ID:
        admin_commands = {
            'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞': show_statistics,
            'üì¢ –†–æ–∑—Å–∏–ª–∫–∞': start_broadcast,
            'üíµ –ó–º—ñ–Ω–∏—Ç–∏ –±–∞–ª–∞–Ω—Å': start_balance_change,
            'üìÅ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–∞–Ω–∞–ª–∞–º–∏': show_channel_management,
            '‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª': start_adding_channel,
            'üé´ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤': show_promo_stats,
            '‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥': start_adding_promo,
            'üîô –ù–∞–∑–∞–¥': back_to_main_menu
        }
        if text in admin_commands:
            admin_commands[text](message)
            return

    user_commands = {
        'üí∞ –ë–∞–ª–∞–Ω—Å': show_balance,
        'üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞': show_referral_system,
        'üí≥ –í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏': start_withdrawal,
        'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞': show_user_statistics,
        'üéÆ –ú–∏–Ω–∏ –∏–≥—Ä—ã': mini_games_menu,
        'üé∞ –°–ª–æ—Ç—ã': slots_menu,
        '‚Ü©Ô∏è –ù–∞–∑–∞–¥': return_to_main,
        'üçÄ –ü—Ä–æ–º–æ–∫–æ–¥': handle_promo_code,
        'üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤': show_leaders_board,
        'üõ†Ô∏è–¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞': tech_support
    }
    if text in user_commands:
        user_commands[text](message)
        return

# –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–∫—É —Å—Ç–∞–Ω—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
@bot.message_handler(func=lambda message:
    message.from_user.id == ADMIN_ID and
    safe_execute_sql('SELECT state FROM users WHERE user_id = ?',
                    (ADMIN_ID,),
                    fetch_one=True)[0] == 'waiting_for_user_deletion')
def process_user_deletion(message):
    handle_user_deletion(message)

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
def show_balance(message):
    user_id = message.from_user.id
    try:
        # –ó–º—ñ–Ω—é—î–º–æ –Ω–∞ fetch_one=True, –æ—Å–∫—ñ–ª—å–∫–∏ –º–∏ –æ—á—ñ–∫—É—î–º–æ –æ–¥–∏–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = safe_execute_sql(
            'SELECT balance, total_earnings FROM users WHERE user_id = ?',
            (user_id,),
            fetch_one=True  # –î–æ–¥–∞—î–º–æ —Ü–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä
        )

        if result:  # –¢–µ–ø–µ—Ä –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–æ—Å—Ç–æ result
            balance, total_earnings = result
            response = (
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f}$\n"
                f"üìà –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {total_earnings:.2f}$"
            )
            bot.send_message(user_id, response)
        else:
            bot.send_message(user_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É")
    except Exception as e:
        bot.send_message(ADMIN_ID, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –±–∞–ª–∞–Ω—Å—É –¥–ª—è {user_id}: {str(e)}")
        print(f"Error in show_balance: {str(e)}")  # –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏


def show_referral_system(message):
    user_id = message.from_user.id
    try:
        result = safe_execute_sql(
            '''SELECT COUNT(*) as ref_count,
               (SELECT SUM(amount) FROM transactions
                WHERE user_id = ? AND type = 'referral') as ref_earnings
               FROM users WHERE referrer_id = ?''',
            (user_id, user_id)
        )

        if result and result[0]:
            ref_count, ref_earnings = result[0]
            ref_earnings = ref_earnings or 0

            bot_username = bot.get_me().username
            ref_link = f"https://t.me/{bot_username}?start={user_id}"

            response = (
                f"üë• –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:\n"
                f"üë§ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}\n"
                f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –∑ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_earnings:.2f}$\n"
                f"üíµ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {REFERRAL_REWARD}$"
            )

            keyboard = types.InlineKeyboardMarkup()
            # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –∫–æ–¥ –¥–ª—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
            ref_button = types.InlineKeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", switch_inline_query=f"{ref_link}")
            keyboard.add(ref_button)

            bot.send_message(user_id, response, reply_markup=keyboard)
        else:
            bot.send_message(user_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É —Å–∏—Å—Ç–µ–º—É")
    except Exception as e:
        bot.send_message(ADMIN_ID,
                         f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É —Å–∏—Å—Ç–µ–º—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {str(e)}")


def create_admin_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
        'üì¢ –†–æ–∑—Å–∏–ª–∫–∞',
        'üíµ –ó–º—ñ–Ω–∏—Ç–∏ –±–∞–ª–∞–Ω—Å',
        'üìÅ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–∞–Ω–∞–ª–∞–º–∏',
        '‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª',
        'üé´ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤',
        '‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥',
        '‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞',  # –ù–æ–≤–∞ –∫–Ω–æ–ø–∫–∞
        'üîô –ù–∞–∑–∞–¥'
    ]
    keyboard.add(*buttons)
    bot.send_message(message.chat.id, "üîë –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=keyboard)


def show_statistics(message):
    try:
        users = safe_execute_sql('SELECT COUNT(*) FROM users')
        total_earnings = safe_execute_sql('SELECT SUM(total_earnings) FROM users')
        total_withdrawals = safe_execute_sql("SELECT COUNT(*) FROM transactions WHERE type = 'withdrawal'")
        withdrawal_sum = safe_execute_sql("SELECT SUM(amount) FROM transactions WHERE type = 'withdrawal'")

        response = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
            f"üë• –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {users[0][0]}\n"
            f"üí∏ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –∑–∞—Ä–æ–±—ñ—Ç–∫—É: {total_earnings[0][0] if total_earnings[0][0] else 0:.2f}$\n"
            f"üì§ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞—è–≤–æ–∫ –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è: {total_withdrawals[0][0]}\n"
            f"üíµ –°—É–º–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è: {withdrawal_sum[0][0] if withdrawal_sum[0][0] else 0:.2f}$"
        )

        bot.send_message(ADMIN_ID, response)
    except Exception as e:
        bot.send_message(ADMIN_ID, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")


def show_channel_management(message):
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—É.")
        return

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª'))
    keyboard.add(types.KeyboardButton('üîô –ù–∞–∑–∞–¥'))

    bot.send_message(user_id, "–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–∞–Ω–∞–ª–∞–º–∏", reply_markup=keyboard)

def start_adding_channel(message):
    user_id = message.from_user.id
    bot.send_message(user_id, "–í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª –∞–±–æ —Ç–µ–≥ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, @–Ω–∞–∑–≤–∞—Ç–µ–≥—É –∞–±–æ https://t.me/–Ω–∞–∑–≤–∞—Ç–µ–≥—É):")
    safe_execute_sql(
        'UPDATE users SET state = ? WHERE user_id = ?',
        (UserState.waiting_for_channel_add, user_id)
    )

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id) == UserState.waiting_for_channel_add)
async def process_new_channel(message):
    user_id = message.from_user.id
    try:
        channel_input = message.text.strip()

        # –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –≤–≤–µ–¥–µ–Ω–Ω—è
        if channel_input.startswith('@'):
            channel_tag = channel_input
        elif channel_input.startswith('https://t.me/') or channel_input.startswith('t.me/'):
            channel_tag = '@' + channel_input.split('/')[-1]
        else:
            bot.send_message(user_id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å —Ç–µ–≥ –∫–∞–Ω–∞–ª—É –∞–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª.")
            return

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª—ñ
        try:
            chat_info = await bot.get_chat(channel_tag)
            bot_member = await bot.get_chat_member(chat_info.id, bot.get_me().id)

            if bot_member.status not in ['administrator', 'creator']:
                bot.send_message(user_id,
                                 "‚ùå –ë–æ—Ç –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª—É. –î–æ–¥–∞–π—Ç–µ –±–æ—Ç–∞ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                return

            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–∞–Ω–∞–ª
            channel_name = chat_info.title
            channel_link = chat_info.username and f"https://t.me/{chat_info.username}" or f"https://t.me/+{chat_info.invite_link}"
            channel_id = str(chat_info.id)

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–∞–Ω–∞–ª –≤–∂–µ —ñ—Å–Ω—É—î
            existing_channel = safe_execute_sql(
                'SELECT channel_id FROM channels WHERE channel_id = ?',
                (channel_id,)
            )

            if existing_channel:
                bot.send_message(user_id, "‚ùå –¶–µ–π –∫–∞–Ω–∞–ª –≤–∂–µ –¥–æ–¥–∞–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")
                return

            # –î–æ–¥–∞—î–º–æ –∫–∞–Ω–∞–ª –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
            safe_execute_sql(
                'INSERT INTO channels (channel_id, channel_name, channel_link, is_required) VALUES (?, ?, ?, ?)',
                (channel_id, channel_name, channel_link, 1)
            )

            bot.send_message(user_id, f"‚úÖ –ö–∞–Ω–∞–ª {channel_name} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")

        except Exception as e:
            bot.send_message(user_id,
                             "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–∞–Ω–∞–ª. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ:\n1. –ë–æ—Ç –¥–æ–¥–∞–Ω–∏–π –¥–æ –∫–∞–Ω–∞–ª—É\n2. –ë–æ—Ç –º–∞—î –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n3. –ü–æ—Å–∏–ª–∞–Ω–Ω—è/—Ç–µ–≥ –∫–∞–Ω–∞–ª—É –ø—Ä–∞–≤–∏–ª—å–Ω—ñ")
            bot.send_message(ADMIN_ID, f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–∞–Ω–∞–ª—É: {str(e)}")

    except Exception as e:
        bot.send_message(ADMIN_ID, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É: {str(e)}")
        bot.send_message(user_id, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–∞–Ω–∞–ª—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")
    finally:
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É
        safe_execute_sql(
            'UPDATE users SET state = ? WHERE user_id = ?',
            (UserState.none, user_id)
        )


def get_user_state(user_id):
    result = safe_execute_sql(
        'SELECT state FROM users WHERE user_id = ?',
        (user_id,)
    )
    if result and result[0]:
        return result[0][0]
    return UserState.none


def start_withdrawal(message):
    user_id = message.from_user.id
    try:
        result = safe_execute_sql(
            'SELECT balance FROM users WHERE user_id = ?',
            (user_id,)
        )

        if result and result[0]:
            balance = result[0][0]

            if balance >= MIN_WITHDRAWAL:
                msg = (
                    f"üí≥ –í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏\n\n"
                    f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f}$\n"
                    f"üíµ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {MIN_WITHDRAWAL}$\n\n"
                    f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:"
                )
                bot.send_message(user_id, msg)
                bot.register_next_step_handler(message, process_withdrawal_amount)
            else:
                bot.send_message(
                    user_id,
                    f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\nüí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {MIN_WITHDRAWAL}$"
                )
    except Exception as e:
        bot.send_message(ADMIN_ID, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—á–∞—Ç–∫—É –≤–∏–≤–µ–¥–µ–Ω–Ω—è –¥–ª—è {user_id}: {str(e)}")


def process_withdrawal_amount(message):
    user_id = message.from_user.id
    try:
        amount = float(message.text)

        if amount < MIN_WITHDRAWAL:
            bot.send_message(
                user_id,
                f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: {MIN_WITHDRAWAL}$"
            )
            return

        # –ó–∞–ø–∏—Ç—É—î–º–æ TON –≥–∞–º–∞–Ω–µ—Ü—å
        msg = f"‚úÖ –°—É–º–∞ {amount:.2f}$ –ø—Ä–∏–π–Ω—è—Ç–∞.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à TON –∫–æ—à–µ–ª–µ–∫:"
        bot.send_message(user_id, msg)
        bot.register_next_step_handler(message, lambda m: process_withdrawal_wallet(m, amount))
    except ValueError:
        bot.send_message(user_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!")
    except Exception as e:
        bot.send_message(ADMIN_ID, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å—É–º–∏ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –¥–ª—è {user_id}: {str(e)}")

def process_withdrawal_wallet(message, amount):
    user_id = message.from_user.id
    ton_wallet = message.text.strip()

    try:
        result = safe_execute_sql(
            'SELECT balance FROM users WHERE user_id = ?',
            (user_id,)
        )

        if result and result[0]:
            balance = result[0][0]

            if balance >= amount:
                # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –∑ TON –≥–∞–º–∞–Ω—Ü–µ–º
                safe_execute_sql(
                    '''INSERT INTO transactions (user_id, amount, type, status, ton_wallet)
                       VALUES (?, ?, 'withdrawal', 'pending', ?)''',
                    (user_id, amount, ton_wallet)
                )

                # –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
                safe_execute_sql(
                    'UPDATE users SET balance = balance - ? WHERE user_id = ?',
                    (amount, user_id)
                )

                # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —ñ –∞–¥–º—ñ–Ω—É
                bot.send_message(
                    user_id,
                    f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount:.2f}$ –ø—Ä–∏–π–Ω—è—Ç–∞!"
                )

                admin_msg = (
                    f"üí≥ –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è!\n\n"
                    f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_id}\n"
                    f"üí∞ –°—É–º–∞: {amount:.2f}$\n"
                    f"üîë TON –∫–æ—à–µ–ª–µ–∫: {ton_wallet}"
                )

                keyboard = types.InlineKeyboardMarkup()
                approve_button = types.InlineKeyboardButton(
                    "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏",
                    callback_data=f"approve_withdrawal_{user_id}_{amount}"
                )
                reject_button = types.InlineKeyboardButton(
                    "‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏",
                    callback_data=f"reject_withdrawal_{user_id}_{amount}"
                )
                keyboard.add(approve_button, reject_button)

                bot.send_message(ADMIN_ID, admin_msg, reply_markup=keyboard)
            else:
                bot.send_message(user_id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
    except Exception as e:
        bot.send_message(ADMIN_ID, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –¥–ª—è {user_id}: {str(e)}")


# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def show_admin_panel(message):
    if message.from_user.id != ADMIN_ID:
        return

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    admin_buttons = [
        'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
        'üì¢ –†–æ–∑—Å–∏–ª–∫–∞',
        'üíµ –ó–º—ñ–Ω–∏—Ç–∏ –±–∞–ª–∞–Ω—Å',
        'üìÅ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–∞–Ω–∞–ª–∞–º–∏',
        '‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª',
        'üé´ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤',
        '‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥',
        '‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞',
        'üîô –ù–∞–∑–∞–¥'
    ]
    for button in admin_buttons:
        keyboard.add(types.KeyboardButton(button))

    bot.send_message(message.chat.id, "üîë –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=keyboard)

def show_statistics(message):
    if message.from_user.id != ADMIN_ID:
        return

    try:
        stats = safe_execute_sql('''
            SELECT
                COUNT(*) as total_users,
                SUM(balance) as total_balance,
                COUNT(DISTINCT referrer_id) as total_referrers,
                (SELECT COUNT(*) FROM transactions WHERE status = 'pending') as pending_withdrawals
            FROM users
        ''')

        if stats and stats[0]:
            total_users, total_balance, total_referrers, pending_withdrawals = stats[0]

            response = (
                f"üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                f"üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}\n"
                f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å: {total_balance:.2f}$\n"
                f"üë§ –ê–∫—Ç–∏–≤–Ω–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤: {total_referrers}\n"
                f"üí≥ –û—á—ñ–∫—É—é—Ç—å –≤–∏–≤–µ–¥–µ–Ω–Ω—è: {pending_withdrawals}\n\n"
                f"–û—Å—Ç–∞–Ω–Ω—ñ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:"
            )

            # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
            recent_users = safe_execute_sql('''
                SELECT user_id, username, join_date
                FROM users
                ORDER BY join_date DESC
                LIMIT 5
            ''')

            if recent_users:
                for user in recent_users:
                    response += f"\nüë§ {user[1] or user[0]} - {user[2]}"

            bot.send_message(ADMIN_ID, response)
    except Exception as e:
        bot.send_message(ADMIN_ID, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")


def start_broadcast(message):
    if message.from_user.id != ADMIN_ID:
        return

    bot.send_message(ADMIN_ID, "üì® –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç —Ä–æ–∑—Å–∏–ª–∫–∏:")
    bot.register_next_step_handler(message, process_broadcast)


def process_broadcast(message):
    if message.from_user.id != ADMIN_ID:
        return

    broadcast_text = message.text
    users = safe_execute_sql('SELECT user_id FROM users')

    if not users:
        bot.send_message(ADMIN_ID, "‚ùå –ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏")
        return

    success = 0
    failed = 0

    progress_msg = bot.send_message(ADMIN_ID, "üì® –†–æ–∑—Å–∏–ª–∫–∞ —Ä–æ–∑–ø–æ—á–∞—Ç–∞...")

    for user in users:
        try:
            bot.send_message(user[0], broadcast_text)
            success += 1

            if (success + failed) % 10 == 0:
                bot.edit_message_text(
                    f"üì® –†–æ–∑—Å–∏–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—ñ...\n‚úÖ –£—Å–ø—ñ—à–Ω–æ: {success}\n‚ùå –ù–µ–≤–¥–∞–ª–æ: {failed}",
                    ADMIN_ID,
                    progress_msg.message_id
                )
        except Exception:
            failed += 1
            continue

    bot.edit_message_text(
        f"üì® –†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚úÖ –£—Å–ø—ñ—à–Ω–æ: {success}\n‚ùå –ù–µ–≤–¥–∞–ª–æ: {failed}",
        ADMIN_ID,
        progress_msg.message_id
    )


# –ö–æ–ª–±–µ–∫-–æ–±—Ä–æ–±–Ω–∏–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    print("Callback received:", call.data)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∑–∞–≥–∞–ª—ñ –ø—Ä–∏—Ö–æ–¥—è—Ç—å –∑–∞–ø–∏—Ç–∏

    if "check_subscription" in call.data:
        check_user_subscription(call)
    elif "approve_withdrawal" in call.data:
        handle_withdrawal_approval(call)
    elif "reject_withdrawal" in call.data:
        handle_withdrawal_rejection(call)
    elif call.data == "exit_slots":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(
            call.message.chat.id,
            "üëã –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!",
            reply_markup=create_main_keyboard(call.from_user.id)
        )
    elif call.data == "spin_slots":
        user_id = call.from_user.id

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É
        balance = safe_execute_sql(
            "SELECT balance FROM users WHERE user_id = ?",
            (user_id,),
            fetch_one=True
        )[0]

        if balance < 1:
            bot.answer_callback_query(
                call.id,
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1$",
                show_alert=True
            )
            return

        # –ó–Ω—ñ–º–∞—î–º–æ –≥—Ä–æ—à—ñ
        safe_execute_sql(
            "UPDATE users SET balance = balance - 1 WHERE user_id = ?",
            (user_id,)
        )

        # –ó–∞–ø–∏—Å—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
        safe_execute_sql(
            """INSERT INTO transactions (user_id, amount, type, status)
               VALUES (?, -1, 'slots_game', 'completed')""",
            (user_id,)
        )

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ª–æ—Ç
        bot.delete_message(call.message.chat.id, call.message.message_id)
        spin_msg = bot.send_message(call.message.chat.id, "üé≤")

        # –ß–µ–∫–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é
        time.sleep(3)

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (45% —à–∞–Ω—Å –Ω–∞ –≤–∏–≥—Ä–∞—à)
        win = random.random() < 0.45

        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –≥—Ä–∏
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("üé∞ –ö—Ä—É—Ç–∏—Ç—å - 1$", callback_data="spin_slots"),
            types.InlineKeyboardButton("‚Ü©Ô∏è –í—ã–π—Ç–∏", callback_data="exit_slots")
        )

        if win:
            win_amount = 2
            safe_execute_sql(
                "UPDATE users SET balance = balance + ? WHERE user_id = ?",
                (win_amount, user_id)
            )
            bot.edit_message_text(
                "üé∞\n\nüéâ –í—ã–ø–∞–ª–æ 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 2$!",
                call.message.chat.id,
                spin_msg.message_id,
                reply_markup=keyboard
            )
        else:
            bot.edit_message_text(
                "üé∞\n\nüòî –†–∞–∑–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!",
                call.message.chat.id,
                spin_msg.message_id,
                reply_markup=keyboard
            )


def handle_withdrawal_approval(call):
    if call.from_user.id != ADMIN_ID:
        return

    try:
        _, user_id, amount = call.data.split('_')[1:]
        user_id = int(user_id)
        amount = float(amount)

        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        safe_execute_sql(
            '''UPDATE transactions
               SET status = 'completed'
               WHERE user_id = ? AND amount = ? AND status = 'pending'
               ORDER BY created_at DESC LIMIT 1''',
            (user_id, amount)
        )

        bot.edit_message_text(
            f"‚úÖ –í–∏–≤–µ–¥–µ–Ω–Ω—è {amount}$ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!",
            call.message.chat.id,
            call.message.message_id
        )

        bot.send_message(
            user_id,
            f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount}$ –ø–æ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞!"
        )
    except Exception as e:
        bot.send_message(ADMIN_ID, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è: {str(e)}")


def handle_withdrawal_rejection(call):
    if call.from_user.id != ADMIN_ID:
        return

    try:
        _, user_id, amount = call.data.split('_')[1:]
        user_id = int(user_id)
        amount = float(amount)

        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        safe_execute_sql(
            '''UPDATE transactions
               SET status = 'rejected'
               WHERE user_id = ? AND amount = ? AND status = 'pending'
               ORDER BY created_at DESC LIMIT 1''',
            (user_id, amount)
        )

        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—à—Ç–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        safe_execute_sql(
            'UPDATE users SET balance = balance + ? WHERE user_id = ?',
            (amount, user_id)
        )

        bot.edit_message_text(
            f"‚ùå –í–∏–≤–µ–¥–µ–Ω–Ω—è {amount}$ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ!",
            call.message.chat.id,
            call.message.message_id
        )

        bot.send_message(
            user_id,
            f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount}$ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\nüí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å."
        )
    except Exception as e:
        bot.send_message(ADMIN_ID, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è: {str(e)}")


def show_user_statistics(message):
    user_id = message.from_user.id
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
        referrals_count = safe_execute_sql(
            '''SELECT COUNT(*)
               FROM users
               WHERE referrer_id = ?''',
            (user_id,),
            fetch_one=True
        )[0]

        # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞—Ä–æ–±—ñ—Ç–æ–∫ –∑ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
        ref_earnings = safe_execute_sql(
            '''SELECT COALESCE(SUM(amount), 0)
               FROM transactions
               WHERE user_id = ? AND type = 'referral_reward' ''',
            (user_id,),
            fetch_one=True
        )[0]

        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞—Ç—É –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –¥–Ω—ñ–≤ —É –±–æ—Ç—ñ
        join_date = safe_execute_sql(
            '''SELECT join_date
               FROM users
               WHERE user_id = ?''',
            (user_id,),
            fetch_one=True
        )[0]

        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ —É –±–æ—Ç—ñ
        from datetime import datetime
        join_datetime = datetime.strptime(join_date, '%Y-%m-%d %H:%M:%S')
        days_in_bot = (datetime.now() - join_datetime).days

        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        response = (
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrals_count}\n"
            f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–æ–∫ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_earnings:.2f}$\n"
            f"‚è≥ –î–Ω–µ–π –≤ –±–æ—Ç–µ: {days_in_bot}"
        )

        bot.send_message(user_id, response)

    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ —É —Ñ—É–Ω–∫—Ü—ñ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        bot.send_message(ADMIN_ID, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {user_id}: {str(e)}")
        bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

def back_to_main_menu(message):
    user_id = message.from_user.id

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        'üí∞ –ë–∞–ª–∞–Ω—Å',
        'üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',
        'üí≥ –í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏',
        'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
        'üéÆ –ú–∏–Ω–∏ –∏–≥—Ä—ã',
        'üçÄ –ü—Ä–æ–º–æ–∫–æ–¥',
        'üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤',
        'üõ†Ô∏è–¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞'
    ]

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id == ADMIN_ID:
        buttons.append('üîë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å')

    keyboard.add(*buttons)
    bot.send_message(user_id, "üì± –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=keyboard)


def handle_channel_callback(call):
    print(f"Callback received: {call.data}")  # –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è

    if call.from_user.id != ADMIN_ID:
        print(f"User {call.from_user.id} is not admin")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ ID
        return

    if call.data == 'add_channel':
        print("Processing add_channel command")  # –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
        bot.answer_callback_query(call.id)
        msg = bot.send_message(ADMIN_ID, "üì¢ –ü–µ—Ä–µ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—É:")
        bot.register_next_step_handler(msg, process_new_channel)  # –ó–º—ñ–Ω—é—î–º–æ call.message –Ω–∞ msg

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–∞–Ω–∞–ª–∞–º–∏
def show_channel_management(message):
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—É.")
        return

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª'))
    keyboard.add(types.KeyboardButton(' –ù–∞–∑–∞–¥'))

    bot.send_message(user_id, "–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–∞–Ω–∞–ª–∞–º–∏", reply_markup=keyboard)


# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–ª–∞—Ç—ñ–∂–Ω–∏—Ö —Å–∏—Å—Ç–µ–º
def start_balance_change(message):
    if message.from_user.id != ADMIN_ID:
        return

    bot.send_message(
        ADMIN_ID,
        "üë§ –í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:"
    )
    bot.register_next_step_handler(message, process_user_id_for_balance)


def process_user_id_for_balance(message):
    if message.from_user.id != ADMIN_ID:
        return

    try:
        user_id = int(message.text)

        result = safe_execute_sql(
            'SELECT balance FROM users WHERE user_id = ?',
            (user_id,)
        )

        if result and result[0]:
            current_balance = result[0][0]

            msg = (
                f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_id}\n"
                f"üí∞ –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {current_balance}$\n\n"
                f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Å—É–º—É –±–∞–ª–∞–Ω—Å—É:"
            )

            bot.send_message(ADMIN_ID, msg)
            bot.register_next_step_handler(message, process_new_balance, user_id)
        else:
            bot.send_message(ADMIN_ID, "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
    except ValueError:
        bot.send_message(ADMIN_ID, "‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID!")
    except Exception as e:
        bot.send_message(ADMIN_ID, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ ID: {str(e)}")


def process_new_balance(message, user_id):
    if message.from_user.id != ADMIN_ID:
        return

    try:
        new_balance = float(message.text)

        if new_balance < 0:
            bot.send_message(ADMIN_ID, "‚ùå –ë–∞–ª–∞–Ω—Å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–∏–º!")
            return

        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ä–∏–π –±–∞–ª–∞–Ω—Å
        result = safe_execute_sql(
            'SELECT balance FROM users WHERE user_id = ?',
            (user_id,)
        )

        if result and result[0]:
            old_balance = result[0][0]

            # –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
            safe_execute_sql(
                'UPDATE users SET balance = ? WHERE user_id = ?',
                (new_balance, user_id)
            )

            # –î–æ–¥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
            amount_change = new_balance - old_balance
            transaction_type = 'bonus' if amount_change > 0 else 'penalty'

            safe_execute_sql(
                '''INSERT INTO transactions (user_id, amount, type, status)
                   VALUES (?, ?, ?, 'completed')''',
                (user_id, abs(amount_change), transaction_type)
            )

            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É —ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            admin_msg = (
                f"‚úÖ –ë–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –∑–º—ñ–Ω–µ–Ω–æ:\n"
                f"–ë—É–ª–æ: {old_balance}$\n"
                f"–°—Ç–∞–ª–æ: {new_balance}$\n"
                f"–†—ñ–∑–Ω–∏—Ü—è: {amount_change:+}$"
            )
            bot.send_message(ADMIN_ID, admin_msg)

            user_msg = (
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–µ–Ω:\n"
                f"–ë—ã–ª–æ: {old_balance}$\n"
                f"–°—Ç–∞–ª–æ: {new_balance}$\n"
                f"–†–∞–∑–Ω–∏—Ü–∞: {amount_change:+}$"
            )
            bot.send_message(user_id, user_msg)
        else:
            bot.send_message(ADMIN_ID, "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
    except ValueError:
        bot.send_message(ADMIN_ID, "‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É!")
    except Exception as e:
        bot.send_message(ADMIN_ID, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –±–∞–ª–∞–Ω—Å—É: {str(e)}")


# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
def start_adding_promo(message):
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        return
    bot.send_message(user_id,
                     "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥, —Å—É–º—É –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ —Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–∞—Ü—ñ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: HAPPY2024 100 50")
    bot.register_next_step_handler(message, process_promo_code_addition)


def process_promo_code_addition(message):
    try:
        promo_code, reward, max_activations = message.text.split()
        reward = float(reward)
        max_activations = int(max_activations)

        # –î–æ–¥–∞—î–º–æ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        add_promo_code(promo_code, reward, max_activations)

        bot.send_message(message.from_user.id,
                         f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!\n–ö–æ–¥: {promo_code}\n–°—É–º–∞: {reward}\n–ú–∞–∫—Å. –∞–∫—Ç–∏–≤–∞—Ü—ñ–π: {max_activations}")
    except ValueError:
        bot.send_message(message.from_user.id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    except Exception as e:
        bot.send_message(message.from_user.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")


def add_promo_code(code, reward, max_activations):
    safe_execute_sql(
        'INSERT INTO promo_codes (code, reward, max_activations, current_activations) VALUES (?, ?, ?, 0)',
        (code, reward, max_activations)
    )


def handle_promo_code(message):
    user_id = message.from_user.id
    if message.text.strip() == 'üçÄ –ü—Ä–æ–º–æ–∫–æ–¥':
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:", reply_markup=types.ForceReply())
        bot.register_next_step_handler(message, process_promo_activation)


def process_promo_activation(message):
    user_id = message.from_user.id
    promo_code = message.text.strip().upper()

    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø—Ä–æ–º–æ–∫–æ–¥ —ñ—Å–Ω—É—î
        promo = safe_execute_sql(
            "SELECT code, reward, max_activations, current_activations FROM promo_codes WHERE code = ?",
            (promo_code,),
            fetch_one=True
        )

        if not promo:
            bot.send_message(user_id, "‚ùå –¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return

        # –†–æ–∑–ø–∞–∫–æ–≤—É—î–º–æ –¥–∞–Ω—ñ
        code, reward, max_activations, current_activations = promo

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∞–∫—Ç–∏–≤–∞—Ü—ñ–π
        if current_activations >= max_activations:
            bot.send_message(user_id, "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (–¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π)!")
            return

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–≤ —Ü–µ–π –ø—Ä–æ–º–æ–∫–æ–¥
        used = safe_execute_sql(
            "SELECT 1 FROM used_promo_codes WHERE user_id = ? AND promo_code = ?",
            (user_id, promo_code),
            fetch_one=True
        )
        if used:
            bot.send_message(user_id, "‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥!")
            return

        # –Ø–∫—â–æ –≤—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ, –¥–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Å –≤ —Ç–∞–±–ª–∏—Ü—é used_promo_codes
        safe_execute_sql(
            "INSERT INTO used_promo_codes (user_id, promo_code) VALUES (?, ?)",
            (user_id, promo_code)
        )

        # –û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–∞—Ü—ñ–π –ø—Ä–æ–º–æ–∫–æ–¥—É
        safe_execute_sql(
            "UPDATE promo_codes SET current_activations = current_activations + 1 WHERE code = ?",
            (promo_code,)
        )

        # –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        current_balance = safe_execute_sql(
            "SELECT balance FROM users WHERE user_id = ?",
            (user_id,),
            fetch_one=True
        )[0]

        new_balance = current_balance + reward
        safe_execute_sql(
            "UPDATE users SET balance = ? WHERE user_id = ?",
            (new_balance, user_id)
        )

        bot.send_message(
            user_id,
            f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
            f"üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ: {reward} $\n"
            f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {new_balance} $"
        )

    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ø—Ä–æ–º–æ–∫–æ–¥—É: {str(e)}")
        bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –î–æ–¥–∞–º–æ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –¥–ª—è –∞–¥–º—ñ–Ω–∞
def show_promo_stats(message):
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        return

    try:
        promo_stats = safe_execute_sql(
            '''
            SELECT
                code,
                reward,
                max_activations,
                current_activations,
                created_at
            FROM promo_codes
            ORDER BY created_at DESC
            ''',
            fetch_one=False
        )

        if not promo_stats:
            bot.send_message(user_id, "üìä –ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ")
            return

        response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:\n\n"
        for promo in promo_stats:
            code, reward, max_act, curr_act, created_at = promo
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if curr_act < max_act else "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"
            response += (
                f"üé´ –ö–æ–¥: {code}\n"
                f"üí∞ –°—É–º–º–∞: {reward} $\n"
                f"üìä –ê–∫—Ç–∏–≤–∞—Ü–∏–π: {curr_act}/{max_act}\n"
                f"üìÖ –°–æ–∑–¥–∞–Ω: {created_at}\n"
                f"üìç –°—Ç–∞—Ç—É—Å: {status}\n"
                f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            )

        bot.send_message(user_id, response)

    except Exception as e:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤")
        print(f"–û—à–∏–±–∫–∞ show_promo_stats: {str(e)}")


@bot.message_handler(func=lambda message: message.text == "üèÜ –¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤")
def show_leaders_board(message):
    try:
        conn = sqlite3.connect('bot_database.db')
        cursor = conn.cursor()

        cursor.execute('''
            SELECT
                user_id,
                username,
                (SELECT COUNT(*) FROM users u2 WHERE u2.referrer_id = u1.user_id) as referral_count,
                balance
            FROM
                users u1
            WHERE
                user_id NOT IN (1270564746, 1115356913)
            ORDER BY
                referral_count DESC
            LIMIT 10
        ''')

        leaders = cursor.fetchall()
        conn.close()

        if leaders:
            response = "*üèÜ –¢–æ–ø-10 –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:*\n\n"
            for index, (user_id, username, referral_count, balance) in enumerate(leaders, 1):
                display_name = username if username else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
                response += (f"*{index}.* *{display_name}*\n"
                           f"   üë• –†–µ—Ñ–µ—Ä–∞–ª–∏: {referral_count}\n"
                           f"   üí∏ –ë–∞–ª–∞–Ω—Å: ${balance:.2f}\n\n")
        else:
            response = "üèÜ –ü–æ–∫–∞ –Ω–µ—Ç –ª–∏–¥–µ—Ä–æ–≤. –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π!"

        bot.send_message(message.chat.id, response, parse_mode="Markdown")

    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ —Ç–∞–±–ª–∏—Ü—ñ –ª—ñ–¥–µ—Ä—ñ–≤: {e}")
        bot.send_message(message.chat.id, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–∫–∞–∑–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


@bot.message_handler(func=lambda message: message.text == 'üõ†Ô∏è–¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞')
def tech_support(message):
    support_link = "tg://resolve?domain=m1sepf"
    bot.send_message(message.chat.id, "–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ...",
                     reply_markup=types.InlineKeyboardMarkup().add(
                         types.InlineKeyboardButton("üìû –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫–µ", url=support_link)
                     ))

# –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def delete_user_from_database(user_id):
    try:
        conn = sqlite3.connect('bot_database.db')
        cursor = conn.cursor()

        # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        cursor.execute('DELETE FROM transactions WHERE user_id = ?', (user_id,))

        # –í–∏–¥–∞–ª—è—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ –ø—Ä–æ–º–æ–∫–æ–¥–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        cursor.execute('DELETE FROM used_promo_codes WHERE user_id = ?', (user_id,))

        # –í–∏–¥–∞–ª—è—î–º–æ —Å–∞–º–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        cursor.execute('DELETE FROM users WHERE user_id = ?', (user_id,))

        conn.commit()
        conn.close()
        return True
    except Exception as e:
        print(f"Error deleting user: {str(e)}")
        return False

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—á–∞—Ç–∫—É –ø—Ä–æ—Ü–µ—Å—É –≤–∏–¥–∞–ª–µ–Ω–Ω—è
def start_user_deletion(message):
    if message.from_user.id != ADMIN_ID:
        return

    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    safe_execute_sql(
        'UPDATE users SET state = ? WHERE user_id = ?',
        ('waiting_for_user_deletion', ADMIN_ID)
    )

    bot.send_message(ADMIN_ID, "üë§ –í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏:")

# –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def handle_user_deletion(message):
    try:
        user_to_delete = int(message.text)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        user_exists = safe_execute_sql(
            'SELECT username FROM users WHERE user_id = ?',
            (user_to_delete,),
            fetch_one=True
        )

        if not user_exists:
            bot.send_message(ADMIN_ID, "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.")
        else:
            if delete_user_from_database(user_to_delete):
                bot.send_message(
                    ADMIN_ID,
                    f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_exists[0] or user_to_delete} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö."
                )
            else:
                bot.send_message(ADMIN_ID, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")

        # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
        safe_execute_sql(
            'UPDATE users SET state = ? WHERE user_id = ?',
            ('none', ADMIN_ID)
        )
        show_admin_panel(message)

    except ValueError:
        bot.send_message(ADMIN_ID, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")


@bot.message_handler(func=lambda message: message.text == "üéÆ –ú–∏–Ω–∏ –∏–≥—Ä—ã")
def mini_games_menu(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('üé∞ –°–ª–æ—Ç—ã'))
    keyboard.add(types.KeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥'))
    bot.send_message(message.chat.id, "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏-–∏–≥—Ä—É:", reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text == "üé∞ –°–ª–æ—Ç—ã")
def slots_menu(message):
    keyboard = types.InlineKeyboardMarkup()
    spin_button = types.InlineKeyboardButton("üé∞ –ö—Ä—É—Ç–∏—Ç—å - 1$", callback_data="spin_slots")
    exit_button = types.InlineKeyboardButton("‚Ü©Ô∏è –í—ã–π—Ç–∏", callback_data="exit_slots")
    keyboard.add(spin_button)
    keyboard.add(exit_button)

    text = (
        "üé∞ *–ò–≥—Ä–æ–≤—ã–µ –∞–≤—Ç–æ–º–∞—Ç—ã*\n\n"
        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –≤—Ä–∞—â–µ–Ω–∏—è: *1$*\n"
        "üèÜ –í—ã–∏–≥—Ä—ã—à –ø—Ä–∏ 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞—Ö: *2$*\n"
        "–£–¥–∞—á–∏! üçÄ"
    )

    bot.send_message(
        message.chat.id,
        text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@bot.message_handler(func=lambda message: message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
def return_to_main(message):
    bot.send_message(
        message.chat.id,
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=create_main_keyboard(message.from_user.id)
    )

def get_daily_plays(user_id):
    today = datetime.now().date()
    return safe_execute_sql(
        """SELECT COUNT(*) FROM transactions
           WHERE user_id = ? AND type = 'slots_game'
           AND DATE(created_at) = ?""",
        (user_id, today),
        fetch_one=True
    )[0]


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è SQL-–∑–∞–ø–∏—Ç—ñ–≤
def safe_execute_sql(query, params=None, fetch_one=False):
    try:
        conn = sqlite3.connect('bot_database.db')
        cursor = conn.cursor()

        if params is not None:
            cursor.execute(query, params)
        else:
            cursor.execute(query)

        if fetch_one:
            result = cursor.fetchone()
        else:
            result = cursor.fetchall()

        conn.commit()
        conn.close()
        return result
    except Exception as e:
        print(f"Database error: {str(e)}")
        return None


def check_table_structure():
    try:
        conn = sqlite3.connect('bot_database.db')
        cursor = conn.cursor()

        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ñ channels
        cursor.execute("PRAGMA table_info(channels)")
        columns = cursor.fetchall()
        print("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ channels:", columns)

        conn.close()
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ: {str(e)}")

def run_bot():
    while True:
        try:
            print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
            bot.polling(none_stop=Tru, interval=3, timeout=30)
        except ApiException as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ API Telegram: {e}")
            time.sleep(15)
        except Exception as e:
            print(f"‚ö†Ô∏è –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            time.sleep(15)
        finally:
            print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

if __name__ == "__main__":
    while True:
        try:
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
            ensure_database_exists()

            # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É
            safe_execute_sql('''
                INSERT OR IGNORE INTO channels (channel_id, channel_name, channel_link, is_required)
                VALUES (?, ?, ?, ?)
            ''', ('-1002157115077', 'CryptoWave', 'https://t.me/CryptoWaveee', 1))

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—å
            check_table_structure()

            # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            keep_alive()

            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø—ñ–Ω–≥ —É –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
            ping_thread = Thread(target=ping_bot, daemon=True)
            ping_thread.start()

            print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")

            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
            run_bot()

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {str(e)}")
            print("‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º...")
            time.sleep(15)
